//
// $Id$
//
// Nenya library - tools for developing networked games
// Copyright (C) 2002-2007 Three Rings Design, Inc., All Rights Reserved
// http://www.threerings.net/code/nenya/
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2.1 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

package com.threerings.flash {

import flash.events.EventDispatcher;
import flash.events.IEventDispatcher;

import flash.events.KeyboardEvent;

import flash.utils.Dictionary;

/**
 * A very simple class that adapts the KeyboardEvents generated by some source by discarding
 * the extra KEY_DOWN events generated while a key is held down.
 */
public class KeyRepeatBlocker extends EventDispatcher
{
    /**
     * Create a KeyRepeatBlocker that will be blocking key repeat events from
     * the specified source.
     */
    public function KeyRepeatBlocker (source :IEventDispatcher)
    {
        _source = source;

        _source.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
        _source.addEventListener(KeyboardEvent.KEY_UP, handleKeyUp);
    }

    /**
     * Dispose of this KeyRepeatBlocker.
     */
    public function shutdown () :void
    {
        _source.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
        _source.removeEventListener(KeyboardEvent.KEY_UP, handleKeyUp);
    }

    protected function handleKeyDown (event :KeyboardEvent) :void
    {
        if (!_down[event.keyCode]) {
            _down[event.keyCode] = true;
            dispatchEvent(event);
        }
    }

    protected function handleKeyUp (event :KeyboardEvent) :void
    {
        delete _down[event.keyCode];
        dispatchEvent(event);
    }

    /** Our source. */
    protected var _source :IEventDispatcher;

    /** Tracks whether a key is currently being held down. */
    protected var _down :Dictionary = new Dictionary();
}
}
